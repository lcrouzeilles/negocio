package controlador;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Random;

import javax.swing.JOptionPane;

import negocio.Jugador;
import negocio.Maquina;
import negocio.Premio;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Sistema.java
//  @ Date : 22/5/2018
//  @ Author : 
//
//

public class Sistema {
	private Collection<Maquina> maquinas;
	private static Sistema sistema;
	private static ArrayList<String> combinacion;
	private static ArrayList<String> frutas;

	public Sistema() {
		maquinas = new ArrayList<Maquina>();
		combinacion = new ArrayList<String>();
		frutas = new ArrayList<String>();
		agregarFrutas();
	}

	private void agregarFrutas() {
		frutas.add("frutilla");
		frutas.add("sandia");
		frutas.add("banana");
		frutas.add("manzana");
		frutas.add("uva");
	}

	public void inicializarMaquina(int recaudacion, int recaudacionMinima, int casilleros, int precioJugada, int id) {
		Maquina m = new Maquina(recaudacion, recaudacionMinima, casilleros, precioJugada, id);
		maquinas.add(m);
	}

	private Maquina buscarMaquina(int id) {
		for (Maquina m : maquinas) {
			if (m.getId() == id) {
				return m;
			}
		}
		return null;
	}

	public void agregarPremio(int valorPremio, int idMaquina, ArrayList<String> frutas) {
		Maquina m = buscarMaquina(idMaquina);
		Premio p = new Premio(valorPremio, idMaquina, frutas);
		m.agregarPremio(p);
	}

	public int obtenerNroCasilleros(int id) {
		@SuppressWarnings("unused")
		int casilleros;
		return casilleros = buscarMaquina(id).getCasilleros();
	}

	public int getPrecioJugada(int id) {
		Maquina m = buscarMaquina(id);
		return m.getPrecioJugada();
	}

	public void quitarPremios(int id) {
		Maquina m = buscarMaquina(id);
		for (Premio p : m.getPremios()) {
			m.getPremios().remove(p);
		}
	}

	public void registrarJugador(int credito, int idMaquina, int idJugador) {
		Jugador j = new Jugador(credito, idMaquina, idJugador);
		buscarMaquina(idMaquina).setJugador(j);
	}

	public void quitarJugador(int id) {
		Maquina m = buscarMaquina(id);
		m.quitarJugador();
	}

	public static Sistema getSingletonInstance() {
		if (sistema == null) {
			sistema = new Sistema();
		}
		return sistema;
	}

	public int maquinaToString(int id) {
		Maquina m = buscarMaquina(id);
		return m.getRecaudacion();
	}

	public boolean existeMaquina(int id) {
		boolean flag = false;
		for (Maquina m : maquinas) {
			if (id == m.getId()) {
				flag = true;
			}
		}
		return flag;
	}


	private Premio buscarPremio(ArrayList<String> combinacion) {
		for (Maquina m : maquinas)
			return m.buscarPremio(combinacion);
		return null;
	}
	
	public int getCreditoJugador(int id, int idJugador) {
		Maquina m = buscarMaquina(id);		
		return m.getJugador().getCredito();
	}
	
	public void setCreditoJugador(int id, int credito) {
		Maquina m = buscarMaquina(id);	
		m.setCreditoJugador(credito);
	}

	public boolean realizarJugada(int id, int idJugador) {
		combinacion = null;
		int valorPremio;
		Maquina m = buscarMaquina(id);
		m.notificarJugador();
		int credito = getCreditoJugador(id, idJugador);
		if (credito >= m.getPrecioJugada()) {			
			setCreditoJugador(m.getId(), credito - m.getPrecioJugada());
			m.incrementarRecaudacion(m.getPrecioJugada());
			ArrayList<String> comb = generarCombinacion(m.getCasilleros());
			valorPremio = m.esPremio(comb);// valido si es premio y devuelve el valor(devuelve 0 si no es premio)
			if (valorPremio != 0) {
				m.restarValorPremio(valorPremio);
				m.quitarPremio(buscarPremio(comb));
				JOptionPane.showMessageDialog(null, "Valor de premio: "+valorPremio);
				return true;
			}else {
				JOptionPane.showMessageDialog(null, "No hubo premio");
			}
		} else {
			JOptionPane.showMessageDialog(null, "No tiene el credito suficiente para jugar");
		}
		return false;
	}

	public ArrayList<String> generarCombinacion(int casilleros) {
		Random random = new Random();
		combinacion = new ArrayList<String>();
		String s;
		for (int i = 0; i < casilleros; i++) {
			s = frutas.get(random.nextInt(5));
			combinacion.add(s);
		}
		return combinacion;
	}

	public ArrayList<String> getCombinacion() {
		return combinacion;
	}

	private Jugador buscarJugador(int idJugador) {
		for (Maquina m : maquinas)
			if (m.getJugador().getIdJugador() == idJugador)
				return m.getJugador();
		return null;
	}

	public void asignarPremio(int credito, int id) {
		Maquina m = buscarMaquina(id);
		credito = credito + m.esPremio(combinacion);
	}

	public void incrementarCredito(int x) {

	}
}
